const int numReadings = 5;
float readings[numReadings];
int readIndex = 0;
float total = 0;
float average = 0;

float previousAltitude = 0;
float smoothedAltitude = 0;
float alpha = 0.1;

const float threshold = 5.0;
const int sampleInterval = 1000;

const float ejectionAltitude = 1000.0;
bool ejected = false;

const float descentRate = -50.0;

void setup() {
  Serial.begin(9600);
  for (int i = 0; i < numReadings; i++) {
    readings[i] = 0;
  }
}

float getAltitude() {
  static int simulationData[] = {0, 104, 193, 287, 364, 459, 607, 746, 680, 552, 1023, 465, 433, 420, 377, 340, 295, 250, 215, 185, 850, 150, 117, 75, 38, 12, 0};
  static int index = 0;

  if (!ejected) {
    float altitude = simulationData[index];
    index = (index + 1) % 27;
    return altitude;
  } else {
    return previousAltitude + descentRate;
  }
}

float movingAverage(float newAltitude) {
  total = total - readings[readIndex];
  readings[readIndex] = newAltitude;
  total = total + readings[readIndex];
  readIndex = (readIndex + 1) % numReadings;
  average = total / numReadings;
  return average;
}

float exponentialSmoothing(float newAltitude, float previousSmoothed) {
  return alpha * newAltitude + (1 - alpha) * previousSmoothed;
}

String detectMovement(float currentAltitude, float previousAltitude) {
  float change = currentAltitude - previousAltitude;
  
  if (change > threshold) {
    return "Moving Up";
  } else if (change < -threshold) {
    return "Moving Down";
  } else {
    return "Stationary";
  }
}

void checkForEjection(float currentAltitude) {
  if (!ejected && currentAltitude >= ejectionAltitude) {
    ejected = true;
    Serial.println("CanSat Ejected!");
  }
}

void loop() {
  float currentAltitude = getAltitude();
  float avgAltitude = movingAverage(currentAltitude);
  smoothedAltitude = exponentialSmoothing(currentAltitude, smoothedAltitude);
  String movementStatus = detectMovement(avgAltitude, previousAltitude);
  checkForEjection(avgAltitude);
  
  Serial.print("Raw Altitude: ");
  Serial.print(currentAltitude);
  Serial.print(" m, Moving Average: ");
  Serial.print(avgAltitude);
  Serial.print(" m, Exponential Smoothing: ");
  Serial.print(smoothedAltitude);
  Serial.print(" m, Movement Status: ");
  Serial.println(movementStatus);

  previousAltitude = avgAltitude;
  delay(sampleInterval);
}

